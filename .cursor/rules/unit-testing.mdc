---
description: When you are tasked with generating unit tests for a file
globs: 
alwaysApply: false
---
# Unit Testing

1. Run the existing tests first
  a. Make sure they pass
2. Now add the new test file
  a. Add all tests for complete missing coverage
  b. Run the tests and make sure they pass
3. If any tests do not pass, ask if the intent of the code is correct and the tests are testing the correct thing
  a. Generally when asked to add tests for an existing file or code, the file or code can be assumed to be correct. This is not always the case as there can be minor hidden issues.
4. After confirmation that the tests are accurate, begin updating the code to pass the tests, if necessary.
  a. This should normally not be necessary, but sometimes classes are not very testable and must be modified with dependency injection to enable tests.
  b. Make the minimal code changes to make the tests pass. Do not make other changes, improvements or comments as we want to keep this segement of changes nice and tight to fit into a good commit.
  c. Make small changes at a time and run the tests inbetween each change, especially when a change may have fixed a test.
5. When complete, review the main-coding-workflow for the commit message format.
  a. Suggest a commit message